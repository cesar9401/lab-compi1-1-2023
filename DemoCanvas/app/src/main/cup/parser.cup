package com.labcompi1.democanvas.parser;

class Parser;

parser code {:

    public Parser(Lexer lexer) {
        super(lexer);
    }
:}

/*
    grammar example:

    a -> a + b
    a -> a - b
    a -> b

    b -> b * c
    b -> b / c
    b -> -c
    b -> c

    c -> d ^ c
    c -> d ^ - c
    c -> SQRT LPAREN d RPAREN
    c -> d

    d -> INTEGER
    d -> LPAREN a RPAREN
*/


terminal Token PLUS, MINUS, TIMES, DIVIDE, LPAREN, RPAREN, SQRT, POW, INTEGER;
non terminal Integer a, b, c, d;

a ::=
        a:n1 PLUS b:n2 {: RESULT = n1 + n2; :}
        | a:n1 MINUS b:n2 {: RESULT = n1 - n2; :}
        | b:n1 {: RESULT = n1; :}
        ;

b ::=
        b:n1 TIMES c:n2 {: RESULT = n1 * n2; :}
        | b:n1 DIVIDE c:n2 {: RESULT = n1; :}
        | MINUS c:n1 {: RESULT = -1 * n1; :}
        | c:n1 {: RESULT = n1; :}
        ;

c ::=
        d:n1 POW c:n2 {: RESULT = (int) Math.pow(n1, n2); :}
        | d:n1 POW MINUS c:n2 {: RESULT = (int) Math.pow(n1, -1 * n2); :}
        | SQRT LPAREN a:n1 RPAREN {: RESULT = (int) Math.sqrt(n1); :}
        | d:n1 {: RESULT = n1; :}
        ;

d ::=
        INTEGER:n1 {: RESULT = Integer.valueOf(n1.getValue()); :}
        | LPAREN a:n1 RPAREN {: RESULT = n1; :}
        ;
