package com.labcompi1.demo1.parser;

import java.util.ArrayList;

class Parser;

parser code {:

    public Parser(Lexer lexer) {
        super(lexer);
    }
:}

/*
    grammar example:

    graficar circulo (centroX, centroY, radio);
    graficar cuadrado (posX, posY, lado);
    graficar rectangulo(posX, posY, alto, ancho);

    mainProd -> mainProd prodGraph
    mainProd -> prodGraph

    prodGraph -> GRAPH typeFigure prodConf

    typeFigure -> CIRCLE
    typeFigure -> SQUARE
    typeFigure -> RECTANGLE

    prodConf -> LPAREN operatorProd RPAREN SEMICOLON

    operatorProd -> operatorProd COMMA a
    operatorProd -> a

    a -> a + b
    a -> a - b
    a -> b

    b -> b * c
    b -> b / c
    b -> c

    c -> - d
    c -> d

    d -> INTEGER
    d -> LPAREN a RPAREN
*/


terminal Token PLUS, MINUS, TIMES, DIVIDE, LPAREN, RPAREN, INTEGER;
terminal Token GRAPH, CIRCLE, SQUARE, RECTANGLE, SEMICOLON, COMMA;
non terminal Integer a, b, c, d;
non terminal ArrayList<Integer> operatorProd;
non terminal prodConf, typeFigure, prodGraph, mainProd;

mainProd ::=
        mainProd prodGraph
        | prodGraph
        ;

prodGraph ::=
        GRAPH typeFigure prodConf
        ;

typeFigure ::=
        CIRCLE
        | SQUARE
        | RECTANGLE
        ;

prodConf ::=
        LPAREN:t1 operatorProd:values RPAREN SEMICOLON
            {:
                values.forEach(num -> System.out.println(num));
            :}
        ;

operatorProd ::=
        operatorProd:arreglo COMMA a:num
            {:
                 arreglo.add(num);
                 RESULT = arreglo;
            :}
        | a:num
            {:
                RESULT = new ArrayList<Integer>();
                RESULT.add(num);
            :}
        ;

a ::=
        a:n1 PLUS b:n2 {: RESULT = n1 + n2; :}
        | a:n1 MINUS b:n2 {: RESULT = n1 - n2; :}
        | b:n1 {: RESULT = n1; :}
        ;

b ::=
        b:n1 TIMES c:n2 {: RESULT = n1 * n2; :}
        | b:n1 DIVIDE c:n2 {: RESULT = n1; :}
        | c:n1 {: RESULT = n1; :}
        ;

c ::=
        MINUS d:n1 {: RESULT = -1 * n1; :}
        | d:n1 {: RESULT = n1; :}
        ;

d ::=
        INTEGER:n1 {: RESULT = Integer.valueOf(n1.getValue()); :}
        | LPAREN a:n1 RPAREN {: RESULT = n1; :}
        ;
