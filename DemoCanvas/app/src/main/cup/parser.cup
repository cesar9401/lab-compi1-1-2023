package com.labcompi1.demo1.parser;

import java.util.ArrayList;

import com.labcompi1.demo1.figure.Circle;
import com.labcompi1.demo1.figure.Figure;
import com.labcompi1.demo1.figure.Rectangle;
import com.labcompi1.demo1.figure.Square;
import java_cup.Lexer;


import java_cup.Lexer;

class Parser;

parser code {:

    public Parser(Lexer lexer) {
        super(lexer);
    }
:}

/*
    grammar example:

    graficar circulo (centroX, centroY, radio);
    graficar rectangulo(posX, posY, alto, ancho);
    graficar circulo (centroX, centroY, radio);
    graficar cuadrado (posX, posY, lado);
    graficar rectangulo(posX, posY, alto, ancho);

    mainProd -> mainProd prodGraph
    mainProd -> prodGraph

    prodGraph -> GRAPH typeFigure prodConf

    typeFigure -> CIRCLE
    typeFigure -> SQUARE
    typeFigure -> RECTANGLE

    prodConf -> LPAREN operatorProd RPAREN SEMICOLON

    operatorProd -> operatorProd COMMA a
    operatorProd -> a

    a -> a + b
    a -> a - b
    a -> b

    b -> b * c
    b -> b / c
    b -> c

    c -> - d
    c -> d

    d -> INTEGER
    d -> LPAREN a RPAREN
*/


terminal Token PLUS, MINUS, TIMES, DIVIDE, LPAREN, RPAREN, INTEGER;
terminal Token GRAPH, CIRCLE, SQUARE, RECTANGLE, SEMICOLON, COMMA;
non terminal Integer a, b, c, d;
non terminal ArrayList<Integer> operatorProd, prodConf;
non terminal Integer typeFigure;
non terminal Figure prodGraph;
non terminal ArrayList<Figure> mainProd;

mainProd ::=
        mainProd:figures prodGraph:figure
            {:
                if (figure != null) {
                    figures.add(figure);
                    RESULT = figures;
                }
            :}
        | prodGraph:figure
            {:
                RESULT = new ArrayList<Figure>();
                if (figure != null) {
                    RESULT.add(figure);
                }
            :}
        ;

prodGraph ::=
        GRAPH:token typeFigure:type prodConf:arreglo
            {:
                if (type == ParserSym.CIRCLE) {
                    // TODO: crear circulo
                    if (arreglo.size() != 3) {
                        System.out.println("Error al construir ciculo: " + arreglo);
                        return null;
                    }

                    RESULT = new Circle(token, arreglo.get(0), arreglo.get(1), arreglo.get(2));

                } else if (type == ParserSym.SQUARE) {
                    // TODO: crear cuadrado

                   if (arreglo.size() != 3) {
                        System.out.println("Error al construir cuadrado: " + arreglo);
                        return null;
                   }

                    RESULT = new Square(token, arreglo.get(0), arreglo.get(1), arreglo.get(2));

                } else if (type == ParserSym.RECTANGLE) {
                    // TODO: crear rectangulo
                    if (arreglo.size() != 4) {
                        System.out.println("Error al construir rectangulo: " + arreglo);
                        return null;
                    }

                    RESULT = new Rectangle(token, arreglo.get(0), arreglo.get(1), arreglo.get(2), arreglo.get(3));

                }  else {
                    // TODO: return something
                    RESULT = null;
                }
            :}
        ;

typeFigure ::=
        CIRCLE {: RESULT = ParserSym.CIRCLE; :}
        | SQUARE {: RESULT = ParserSym.SQUARE; :}
        | RECTANGLE {: RESULT = ParserSym.RECTANGLE; :}
        ;

prodConf ::=
        LPAREN operatorProd:values RPAREN SEMICOLON
            {:
                System.out.println("Devolviendo arreglo: " + values);
                RESULT = values;
            :}
        ;

operatorProd ::=
        operatorProd:arreglo COMMA a:num
            {:
                 arreglo.add(num);
                 RESULT = arreglo;
            :}
        | a:num
            {:
                RESULT = new ArrayList<Integer>();
                RESULT.add(num);
            :}
        ;

a ::=
        a:n1 PLUS b:n2 {: RESULT = n1 + n2; :}
        | a:n1 MINUS b:n2 {: RESULT = n1 - n2; :}
        | b:n1 {: RESULT = n1; :}
        ;

b ::=
        b:n1 TIMES c:n2 {: RESULT = n1 * n2; :}
        | b:n1 DIVIDE c:n2 {: RESULT = n1; :}
        | c:n1 {: RESULT = n1; :}
        ;

c ::=
        MINUS d:n1 {: RESULT = -1 * n1; :}
        | d:n1 {: RESULT = n1; :}
        ;

d ::=
        INTEGER:n1 {: RESULT = Integer.valueOf(n1.getValue()); :}
        | LPAREN a:n1 RPAREN {: RESULT = n1; :}
        ;
